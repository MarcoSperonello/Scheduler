{"version":3,"sources":["../../modules/server.js"],"names":["getRouter","getRoutes","restify","_server","WS","handle","port","createServer","name","process","env","APP_NAME","formatters","formatCsv","req","res","body","Error","stack","Buffer","isBuffer","toString","log","use","requestLogger","acceptParser","acceptable","gzipResponse","authorizationParser","queryParser","jsonp","pre","next","header","method","send","request","response","debug","on","auditLogger","server","NODE_ENV","metrics","err","route","info","JSON","stringify","_start","listen","hasOwnProperty","get","path","post","put","del","error","router","routes"],"mappings":"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","file":"server.js","sourcesContent":["import * as restify from 'restify';\nimport plugins from 'restify-plugins';\nimport {inspect} from 'util';\n\nimport Logger from './logger';\n\nlet _server = null;\n\nexport default class WS {\n  constructor(handle, port) {\n\n    if (!_server) {\n\n      _server = restify.createServer({\n        name: process.env.APP_NAME,\n        formatters: {\n          'text/csv': function formatCsv(req, res, body) {\n            if (body instanceof Error)\n              return body.stack;\n\n            if (Buffer.isBuffer(body))\n              return body.toString('base64');\n\n            return inspect(body);\n          }\n        },\n        log: Logger\n      });\n\n      /////////////////////////\n      // DEFAULT MIDDLEWARES //\n      ////////////////////////\n\n      // init log object in req object passing some default parameters\n      _server.use(plugins.requestLogger({}));\n      // accept header\n      _server.use(plugins.acceptParser(_server.acceptable));\n      // always send gzipped response\n      _server.use(plugins.gzipResponse());\n      // parse authorization header\n      _server.use(plugins.authorizationParser());\n      // parse query string\n      _server.use(plugins.queryParser());\n      // enable json parsing ( yields objects :D )\n      _server.use(plugins.jsonp());\n\n      /////////////////////////\n      // CUSTOM MIDDLEWARES //\n      ////////////////////////\n\n      // allow cors (...)\n      _server.pre(function (req, res, next) {\n\n        //happily allow people to use the services (CORS!!)\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        res.header('Access-Control-Allow-Headers', 'Content-Type, X-Requested-With, Authorization');\n\n        if ('OPTIONS' === req.method) {\n          res.send(200);\n        } else {\n          return next();\n        }\n      });\n\n      // log at beginning at each call\n      _server.pre((request, response, next) => {\n        request.log.debug({req: request}, 'BEGIN');\n        return next()\n      });\n\n      // log at the end of each request\n      _server.on('after', plugins.auditLogger({\n        log: Logger,\n        server: _server\n      }));\n\n      // log request metrics in dev mode\n      if (process.env.NODE_ENV === 'dev') {\n        _server.on('after', plugins.metrics({\n          server: _server\n        }, (err, metrics, req, res, route) => {\n          if (err) {\n            req.log.info(err)\n          }\n          req.log.debug(`DONE. Request metrics:`, JSON.stringify(metrics));\n        }))\n      }\n\n      ////////////////////////\n      // REGISTER HANDLERS //\n      ///////////////////////\n      _start(handle);\n\n      ////////////////////////////////////\n      // START LISTENING ON GIVEN PORT //\n      ///////////////////////////////////\n      _server.listen(port, function () {\n        _server.log.info(`Listening on port ${port}`)\n      });\n    }\n    return _server\n  }\n}\n\nfunction _start(handle) {\n  for (let method in handle) {\n    if (handle.hasOwnProperty(method)) {\n      for (let name in handle[method]) {\n        if (handle[method].hasOwnProperty(name)) {\n\n          switch (method) {\n            case \"GET\":\n              _server.get({\n                name: name,\n                path: handle[method][name][\"path\"]\n              }, handle[method][name][\"handler\"]);\n              break;\n            case \"POST\":\n              _server.post({\n                name: name,\n                path: handle[method][name][\"path\"]\n              }, handle[method][name][\"handler\"]);\n              break;\n            case \"PUT\":\n              _server.put({\n                name: name,\n                path: handle[method][name][\"path\"]\n              }, handle[method][name][\"handler\"]);\n              break;\n            case \"DELETE\":\n              _server.del({\n                name: name,\n                path: handle[method][name][\"path\"]\n              }, handle[method][name][\"handler\"]);\n              break;\n            default:\n              _server.log.error(\"Handling of method '\" + method + \"' not implemented\");\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function getRouter() {\n  \"use strict\";\n  return _server.router || null\n}\n\nexport function getRoutes() {\n  \"use strict\";\n  return _server.router.routes || null\n}\n"]}