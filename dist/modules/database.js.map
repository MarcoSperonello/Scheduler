{"version":3,"sources":["../../modules/database.js"],"names":["_instance","Database","start","then","database_instance","catch","error","Promise","onSuccess","onError","info","process","env","MONGO_BASE_URL","MONGO_PORT","MONGO_DB_NAME","connect","database","err","close","query","projection","collection","find","project","filter_object","update_object","updateOne","upsert","findOneAndUpdate","returnOriginal","document","insertOne","deleteOne","distinct_key","distinct","drop","doc_array","insertMany"],"mappings":"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","file":"database.js","sourcesContent":["import {MongoClient as MongoClient} from 'mongodb';\nimport Logger from './logger'\n\nlet _instance = null;\n\n/**\n * @class\n */\nclass Database {\n  /**\n   * Init or get a Database instance.\n   * @constructor\n   */\n  constructor() {\n    if (!_instance) {\n      this.start()\n        .then((database_instance) => {\n          _instance = database_instance;\n          return _instance\n        })\n        .catch((error) => {\n          throw error\n        });\n    } else {\n      return _instance\n    }\n  }\n\n  /**\n   * Open new connection to MongoDB instance.\n   */\n  start() {\n    return new Promise((onSuccess, onError) => {\n      Logger.info(\"connecting to mongodb://\" + process.env.MONGO_BASE_URL + \":\" + process.env.MONGO_PORT + \"/\" + process.env.MONGO_DB_NAME);\n      MongoClient.connect(\"mongodb://\" + process.env.MONGO_BASE_URL + \":\" + process.env.MONGO_PORT + \"/\" + process.env.MONGO_DB_NAME)\n        .then((database) => {\n          Logger.info(\"Connected to %s database at %s:%s\", process.env.MONGO_DB_NAME, process.env.MONGO_BASE_URL, process.env.MONGO_PORT);\n          onSuccess(database)\n        })\n        .catch((err) => {\n          Logger.error(err);\n          onError(err)\n        })\n    })\n  }\n\n  stop() {\n    if (_instance) {\n      return _instance.close()\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Run a find. Yield an array of documents.\n   * @param query {object} - The query object\n   * @param projection {object} - The projection object\n   * @param collection {string} - The name of the target collection\n   */\n  performFind(query, projection, collection) {\n    return _instance.collection(collection).find(query).project(projection);\n  }\n\n  /**\n   * Update exactly one document matching the query with the update object.\n   * @param filter_object {object} - The query object\n   * @param update_object {object} - The replacement object\n   * @param collection {string} - The name of target collection\n   */\n  performUpdate(filter_object, update_object, collection) {\n    return _instance.collection(collection).updateOne(filter_object, update_object, {upsert: true});\n  }\n\n\n  /**\n   * Perform a findOne and modify exactly one doc matching the query. Returns updated document.\n   * @param filter_object {object} - The query object\n   * @param update_object {object} - The replacement object\n   * @param collection {string} - The name of target collection\n   */\n  performFindOneAndModify(filter_object, update_object, collection) {\n    return _instance.collection(collection).findOneAndUpdate(filter_object, update_object, {returnOriginal: false});\n  }\n\n  /**\n   * Insert a given document in the target collection.\n   * @param document {object} - an object to insert in database\n   * @param collection {string} - the target collection\n   */\n  performInsertOne(document, collection) {\n    return _instance.collection(collection).insertOne(document);\n  }\n\n  /**\n   * Removes one document matching the filter_object.\n   * @param filter_object {object} - The query object\n   * @param collection {string} - the target collection\n   */\n  performRemove(filter_object, collection) {\n    return _instance.collection(collection).deleteOne(filter_object);\n  }\n\n  /**\n   * Returns all the values of a given key.\n   * @param distinct_key {string} - target key\n   * @param collection {string} - target collection\n   */\n  performDistinct(distinct_key, collection) {\n    return _instance.collection(collection).distinct(distinct_key, {});\n  }\n\n  /**\n   * Drops a collection.\n   * @param collection {string} - the target collection\n   */\n  performDrop(collection) {\n    return _instance.collection(collection).drop();\n  }\n\n  /**\n   * Insert an array of documents in target collection\n   * @param doc_array {Array} - array of documents to be inserted\n   * @param collection {string} - target collection\n   */\n  performInsertMany(doc_array, collection) {\n    return _instance.collection(collection).insertMany(doc_array);\n  }\n}\n\nexport default new Database();"]}